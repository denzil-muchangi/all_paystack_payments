import 'enums.dart';
import 'payment_request.dart';
import 'validation_utils.dart';

/// Payment request for bank transfer payments.
///
/// This class represents a bank transfer payment request where Paystack generates
/// temporary account details for customers to transfer money directly from their bank accounts.
///
/// ## Properties
/// The bank transfer request uses standard [PaymentRequest] properties.
/// Paystack will generate account details (account number, bank name, account name)
/// that should be displayed to the customer for the transfer.
///
/// ## Example
/// ```dart
/// final request = BankTransferRequest(
///   amount: 100000, // â‚¦1,000.00
///   currency: Currency.ngn,
///   email: 'customer@example.com',
///   reference: 'bank_transfer_123',
/// );
///
/// final response = await AllPaystackPayments.initializePayment(request);
/// // Display bank details from response.rawResponse['data']
/// ```
class BankTransferRequest extends PaymentRequest {
  /// Bank account number (optional, will be generated by Paystack)
  final String? accountNumber;

  /// Bank code (optional, will be generated by Paystack)
  final String? bankCode;

  /// Bank name (optional, will be generated by Paystack)
  final String? bankName;

  /// Transfer type
  final BankTransferType transferType;

  BankTransferRequest({
    required super.amount,
    required super.currency,
    required super.email,
    super.reference,
    super.metadata,
    super.callbackUrl,
    String? accountNumber,
    String? bankCode,
    String? bankName,
    this.transferType = BankTransferType.account,
  }) : accountNumber = accountNumber != null
           ? ValidationUtils.sanitizeString(accountNumber)
           : null,
       bankCode = bankCode != null
           ? ValidationUtils.sanitizeString(bankCode)
           : null,
       bankName = bankName != null
           ? ValidationUtils.sanitizeString(bankName)
           : null,
       super(paymentMethod: PaymentMethod.bankTransfer);

  @override
  Map<String, dynamic> getSpecificJson() {
    return {
      'bank_transfer': {
        'account_number': accountNumber,
        'bank_code': bankCode,
        'bank_name': bankName,
        'transfer_type': transferType.name,
      },
    };
  }

  @override
  void validate() {
    super.validate();

    // For bank transfers, account details are usually generated by Paystack
    // So we don't require them in the request, but if provided, validate them
    if (accountNumber != null) {
      if (accountNumber!.isEmpty) {
        throw ArgumentError('Account number cannot be empty if provided');
      }
      if (!RegExp(r'^\d{10}$').hasMatch(accountNumber!)) {
        throw ArgumentError('Account number must be exactly 10 digits');
      }
    }

    if (bankCode != null) {
      if (bankCode!.isEmpty) {
        throw ArgumentError('Bank code cannot be empty if provided');
      }
      if (!RegExp(r'^\d{3}$').hasMatch(bankCode!)) {
        throw ArgumentError('Bank code must be exactly 3 digits');
      }
    }

    if (bankName != null && bankName!.isEmpty) {
      throw ArgumentError('Bank name cannot be empty if provided');
    }
  }
}
